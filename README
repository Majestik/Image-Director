PROGRAM:

     Image Director: A library of routines for on-the-fly web imaging, by Jonathan M. Hollin (darkblue@sdf.lonestar.org).


COPYRIGHT:

     Copyright 2009-2010 Jonathan M. Hollin
     Test Image, "Alba Dominguez 17", Copyright Vincent Boiteau/Studio.es (http://www.flickr.com/photos/2dogs_productions/375351116/). Used in accordance with the Creative Commons Attribution-Non-Commercial-Share Alike 2.0 Generic License.


LICENSE:

     This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

     You should have received a copy of the GNU General Public License along with this program. If not, see: http://www.gnu.org/licenses/


INCORPORATES:

     AI Grayscale algorithm from:
     http://www.ars-informatica.ca/article.php?article=18

     apple.com-style reflection code ("wet floor") from:
     http://reflection.corephp.co.uk/

     Dave Shea's CSS Sprite concept:
     http://www.alistapart.com/articles/sprites

     File handling code (including caching) and thumbnail generation from:
     http://code.google.com/p/timthumb/

     Rounded corner code from:
     http://it.toolbox.com/blogs/opensource-programming/rounded-corners-on-images-22705


PARAMETERS:

     src:      Source image
     q:        Quality (default = 60, maximum = 100 (lower value = better quality but larger file-size))
     pas:      Experimental. Preserve the alpha channel of the source image.
               Can be used if the Image Director fails to work as expected with a transparent image. (0 (default) or 1)
     nocache:  Disables the internal cache look-up mechanism (cache revisions still take place though). Useful for debugging/testing.
               (0 (default) or 1)

     t:        Request thumbnail (0 or 1 (default))
     w:        Width (default = 100)
     h:        Height (default = 100)
     ccx:      Cropping start point, X co-ordinate (horizontal) (default = 0)
     ccy:      Cropping start point, Y co-ordinate (vertical) (default = 0)
     zc:       Zoom crop (0 (default) or 1)

     aig:      Request AI Grayscale conversion (0 (default) or 1).
               Note: Transparency (if any) will be lost. Works best with photos.
     aiga:     AI Grayscale blend algorithm (default 0.8)

     tint:     Request a tinted filter (0 (default) or 1).
               Note: Won't work as expected with transparent images.
               Works best with photos and images that have had the AI Grayscale applied.
     tintc:    Tint colour (6-digit RGB hexadecimal format, default is ff0000)
     tinta:    Tint alpha channel (x%: 0% will be completely opaque while 100% will be completely transparent, default is 70%)

     blur:     Request a blurred image (0 (default) or 1). Note: Transparency (if any) will be lost.
     bshift:   Gaussian iterations for blur (1-10: 10 = most blur but slower, default is 2)

     ds:       Apply a drop-shadow to the image (0 (default) or 1)
               Disabled if the apple.com-style reflection is requested.
     pb:       Photo border. Adds a white border around an image. (x: depth of border in pixels, default is 0)
               Only works on images that have the drop-shadow applied.

     asr:      Request an apple.com-style reflection (0 (default) or 1)
     asrh:     Height of the reflection (x% or x (pixels), default is 30%)
     asrfs:    Alpha fade start (x%, default is 20%)
     asrfe:    Alpha fade end (x%, default is 0%)

     csss:     Request a CSS sprite (0 (default) or 1)

     bg:       Apply a background colour. This is useful if using "asr" or "ds" options.
               If "bg" is defined then the transparency can be disabled and a JPEG file can be created rather than a much larger PNG one.

     cr:       Corner Radius, applies rounded corners to the image with a background colour specified in the "bg" parameter.
               (0 (default) or 1)
               Note: Rounding can be disabled for individual corners by sending the "no" argument to any combination of the following parameters: topleft, topright, bottomleft, bottomright (eg: "&topright=no&bottomright=no")
     arc:      Applies anti-aliasing to rounded corners, producing smoother curves, disable for faster corner rendering.
               (0 or 1 (default))

     rf:       The source image is a remote file (http/ftp), handle accordingly.
     rrf:      Refresh the local cached version of the remote file.

     fo:       Request path/filename only output for use with the supporting library: 'id_pipe.php', for recursive operations.


EXAMPLES:

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg" alt="" />
     Result:
          Source image is converted to 100x100 pixel thumbnail, distorted aspect ratio because we haven't requested the Zoom Crop algorithm.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;aig=1&amp;aiga=0.8&amp;q=80&amp;t=0" alt="" />
     Result:
          Source image is converted to weighted-average AI Grayscale at 80% quality.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;aig=1&amp;w=200&amp;h=200&amp;zc=1" alt="" />
     Result:
          Source image is converted to 200x200 pixel weighted-average AI Grayscale thumbnail with a correct aspect ratio as we've requested the Zoom Crop algorithm.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;aig=1&amp;w=200&amp;h=200&amp;zc=1&amp;ds=1&amp;pb=6&amp;tint=1&amp;tintc=5e2612" alt="" />
     Result:
          Source image is converted to 200x200 pixel weighted-average AI Grayscale thumbnail with a correct aspect ratio as we've requested the Zoom Crop algorithm. A sepia tint is applied. Then a white inner-border, 6-pixels deep, and a drop-shadow is applied to the result. For that old photographic print effect.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;aig=1&amp;w=300&amp;h=300&amp;zc=1&amp;csss=1" alt="" />
     Result:
          Source image is converted to 300x300 pixel CSS Sprite, AI Grayscale to colour, (thus the height of the resulting image will be 600 pixels) with a correct aspect ratio as we've requested the Zoom Crop algorithm.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;w=300&amp;h=300&amp;zc=1&amp;aig=1&amp;csss=1&amp;blur=1&amp;bshift=10" alt="" />
     Result:
          Source image is converted to 300x300 pixel CSS Sprite, AI Grayscale to colour, (thus the height of the resulting image will be 600 pixels) with a correct aspect ratio as we've requested the Zoom Crop algorithm. The grayscale image component will also be blurred, following 10 iterations through GD Library's guassian blur filter.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;w=300&amp;aig=1&amp;csss=1&amp;tint=1&amp;tintc=004080" alt="" />
     Result:
          Source image is converted to 300 pixel wide CSS Sprite, AI Grayscale to colour. The aspect ratio of the image is preserved because we haven't specified a height or requested a Zoom Crop. A blue tint (hex colour #004080, 70% transparency) is applied to the grayscale image component.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;t=0&amp;asr=1&amp;asrfs=60%&amp;asrh=30%" alt="" />
     Result:
          Image is rendered with an apple.com-style reflection. The reflection's starting density is 60% that of the original image (fading to 0% - complete transparency). The height of the reflection is 30% that of the original image. The original image is not resized since the "t=0" option has been specified.

     HTML Code:
          <img src="image_director.php?src=/images/whatever.jpg&amp;w=300&amp;aig=1&amp;tint=1&amp;tintc=004080&amp;blur=1&amp;bshift=4&amp;csss=1&amp;asr=1&amp;asrfs=60%&amp;asrh=30%" alt="" />
     Result:
          For this final example we've gone completely over-the-top and applied almost every adjustment possible. The image is first resized to 300 pixels wide (it retains a correct aspect ratio since we haven't specified a height or requested a Zoom Crop). The AI Grayscale is applied with it's default blending algorithm. Then a blue tint is applied (hex colour #004080, 70% transparency). Next we apply the blur filter, requesting 4 blur iterations. Then we request an apple.com-style reflection (with a reflection height 30% that of the original image and starting density 60% that of the original image). Finally we tell the Image Director that we want that whole shebang as a CSS Sprite!

          ... and the Image Director doesn't bat an eyelid! :-)


VERSION HISTORY:

1.00: Initial release

1.01: Minor bug fixes

1.02: Minor bug fixes

1.03:
     Program now saves processed images with the same MIME type as their corresponding source images. However, in cases where the 'ds' or 'asr' options are processed then the MIME type is automatically adjusted to PNG to accommodate the Alpha data (transparency).

1.04: April, 2010
     The problem with 1.03 is that the 'ds' and 'asr' options result in enormous PNG files (GD Library seems to be very inefficient with regards to PNG file-sizes). More often than not, transparency is not really necessary on the processed images if we can ascertain the background colour that the images will be used with.
     Thus I have added a new parameter, 'bg', which accepts a standard HTML hexadecimal colour code and renders the 'ds' and 'asr' images against it. Images which have been processed with the 'ds' or 'asr' options AND which have a 'bg' declared are now saved as JPEG images. This has resulted in average file-size reductions of ~90%!

1.05: 4th May, 2010
     Added code to crop source image from a user-specified start point (X/Y co-ordinates). Handled all the edge cases that I could anticipate.
          1: Cropping is intelligently handled even if the specified X/Y co-ordinates would put the crop outside of the dimensions of the source image.
          2: Cropping can be performed with or without thumbnailing and with or without zoom crop.
          3: Cropping is affected by the 'w' and 'h' parameters if they are set.
          4: If zoom crop ('zc') is not enabled, then the 'w' and/or 'h' parameters, if set, dictate the end co-ordinates of the crop. Thus if an X co-ordinate ('ccx') is supplied along with a 'w' value, then the resulting "crop-to" X position will be: ccx + w, the Y co-ordinate ('ccy') works in the same manner. I call this an "absolute crop."
          5: If zoom crop ('zc') is enabled, then only one of the 'w' or 'h' parameters, if set, will have an effect - the one relating to the largest dimension of the source image. I call this a "relative crop."
     Cropping code was added following a suggestion/request from Eric Kazda at Quantum Dynamix (http://quantumdynamix.net/). Thanks Eric.

1.06: 4th May, 2010
     Bug fix.

1.07: 29th June, 2010
     Minor revisions for PHP 5.3 compatibility.

1.08: 9th July, 2010
     Added facility to apply anti-aliased rounded corners to images with user-defined corner radius and background colour.

1.09: 12th July, 2010
     Added path/filename only output to provide for recursive operations directed by the supporting library: 'id_pipe.php'.

1.10: 12th July, 2010
     Added facility to acquire images from a remote source (via http/ftp).

1.11: 12th July, 2010
     Added local storage/caching of images acquired from a remote source.

1.12: 13th July, 2010
     Added an option to refresh the locally stored version of a remote file.

1.13: 5th August, 2010
     Bug fix.

1.14: 7th September 2010
     Added option to output Image Director's version number.

1.15: 10th November, 2010
     Fixed a couple of mathematical rounding bugs and fixed bug that meant that the Image Director failed when directed to render rounded-corners within a CSS sprite.

1.16: 15th December, 2010
     Fixed a bug with the rounded corner renderer that prevented rounded corners from being created if the Image Director folder was not in the website's root directory.

1.17: 20th December, 2010
     Added automatic server-port detection.

1.18: 20th December, 2010
     Rounded corner rendering now performed internally as opposed to the rather expensive "piped process to an external resource" method we we using before - which didn't work on every host configuration anyway.

1.18.1: 20th December, 2010
     Added switchable over-sampling, to produce anti-aliased corners.

1.18.2: 20th December, 2010
     Added a facility for disabling the rounding of any corner(s).

1.18.3: 21st December, 2010
     Added an image randomiser. Point the Image Director at a directory rather than an image and it will apply the requested transforms to a random image selected from the source directory (local directories only - won't work with a remote source).

1.18.4: 21st December, 2010
     Revised the imaging mechanism to "prefer" to generate JPEG images if it can get away with it (ie: no alpha channel needed) as these are generally smaller in file-size when compared against their PNG counterparts.

1.18.5: 21st December, 2010
     Added CRC32B checksum of Image Director source to image filenames prior to caching. Now the caching mechanism is sensitive to code changes within image_director.php.